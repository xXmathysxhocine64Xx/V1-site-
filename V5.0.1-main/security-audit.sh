#!/bin/bash

# =============================================================================
# SCRIPT D'AUDIT DE S√âCURIT√â AUTOMATIS√â - PORTFOLIO
# =============================================================================
# 
# Usage: ./security-audit.sh
# Description: Lance un audit de s√©curit√© complet du portfolio
# 
# =============================================================================

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage des messages
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fonction de section
section() {
    echo -e "\n${BLUE}============================================${NC}"
    echo -e "${BLUE}üîí $1${NC}"
    echo -e "${BLUE}============================================${NC}\n"
}

# Variables
PROJECT_DIR="/app"
AUDIT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
REPORT_FILE="/app/AUDIT_REPORT_$(date +%Y%m%d_%H%M).md"

# Commencer l'audit
section "AUDIT DE S√âCURIT√â AUTOMATIS√â"
log_info "Date de l'audit: $AUDIT_DATE"
log_info "R√©pertoire: $PROJECT_DIR"

# 1. Audit des vuln√©rabilit√©s NPM/Yarn
section "1. AUDIT DES D√âPENDANCES"
cd "$PROJECT_DIR"

if command -v yarn &> /dev/null; then
    log_info "Lancement de yarn audit..."
    YARN_AUDIT_OUTPUT=$(yarn audit 2>&1)
    if echo "$YARN_AUDIT_OUTPUT" | grep -q "0 vulnerabilities found"; then
        log_success "Aucune vuln√©rabilit√© d√©tect√©e dans les d√©pendances"
        VULN_COUNT="0"
    else
        log_error "Vuln√©rabilit√©s d√©tect√©es ! Ex√©cutez 'yarn audit' pour plus de d√©tails"
        VULN_COUNT=$(echo "$YARN_AUDIT_OUTPUT" | grep -o '[0-9]* vulnerabilities found' | head -1 | grep -o '[0-9]*' || echo "Inconnu")
        echo "$YARN_AUDIT_OUTPUT"
        exit 1
    fi
else
    log_error "Yarn n'est pas install√©"
    exit 1
fi

# 2. V√©rification des secrets expos√©s
section "2. RECHERCHE DE SECRETS EXPOS√âS"

log_info "Recherche de patterns sensibles..."
PATTERNS=("password" "secret" "token" "api_key" "private_key")
FOUND_SECRETS=0

for pattern in "${PATTERNS[@]}"; do
    RESULTS=$(grep -r -i --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" "$pattern" . 2>/dev/null | grep -v "key=" | grep -v "# " || true)
    if [ ! -z "$RESULTS" ]; then
        log_warning "Pattern '$pattern' trouv√©:"
        echo "$RESULTS" | head -5
        FOUND_SECRETS=1
    fi
done

if [ $FOUND_SECRETS -eq 0 ]; then
    log_success "Aucun secret expos√© d√©tect√©"
else
    log_warning "Patterns suspects d√©tect√©s - v√©rification manuelle recommand√©e"
fi

# 3. V√©rification des fichiers de configuration
section "3. AUDIT CONFIGURATION"

# V√©rification Next.js config
if [ -f "next.config.js" ]; then
    log_info "V√©rification de next.config.js..."
    if grep -q "headers()" next.config.js; then
        log_success "Headers de s√©curit√© configur√©s"
    else
        log_warning "Headers de s√©curit√© manquants dans next.config.js"
    fi
    
    if grep -q "poweredByHeader: false" next.config.js; then
        log_success "Header X-Powered-By d√©sactiv√©"
    else
        log_warning "Header X-Powered-By non d√©sactiv√©"
    fi
else
    log_error "Fichier next.config.js non trouv√©"
fi

# V√©rification des variables d'environnement
if [ -f ".env.local" ]; then
    log_info "V√©rification des variables d'environnement..."
    if [ -s ".env.local" ]; then
        log_success "Fichier .env.local pr√©sent"
        # V√©rifier que les secrets ne sont pas hardcod√©s
        if grep -q "localhost\|127.0.0.1" .env.local; then
            log_success "Configuration locale d√©tect√©e"
        fi
    fi
else
    log_warning "Fichier .env.local non trouv√©"
fi

# 4. V√©rification des permissions de fichiers
section "4. AUDIT PERMISSIONS"

log_info "V√©rification des permissions sensibles..."

# Fichiers de configuration sensibles
SENSITIVE_FILES=(".env.local" ".env" "next.config.js")
for file in "${SENSITIVE_FILES[@]}"; do
    if [ -f "$file" ]; then
        PERMISSIONS=$(ls -la "$file" | cut -d' ' -f1)
        log_info "$file: $PERMISSIONS"
        
        # V√©rifier que les fichiers .env ne sont pas lisibles par tous
        if [[ "$file" == .env* ]] && [[ "$PERMISSIONS" == *"r--r--r--"* ]]; then
            log_warning "$file est lisible par tous - consid√©rez chmod 600"
        fi
    fi
done

# 5. Test de build
section "5. TEST DE BUILD S√âCURIS√â"

log_info "Test de build Next.js..."
if yarn build > /dev/null 2>&1; then
    log_success "Build r√©ussi - configuration valide"
else
    log_error "√âchec du build - v√©rifiez la configuration"
fi

# 6. G√©n√©ration du rapport
section "6. G√âN√âRATION DU RAPPORT"

cat > "$REPORT_FILE" << EOF
# üîí RAPPORT D'AUDIT AUTOMATIS√â

**Date:** $AUDIT_DATE  
**Statut:** COMPL√âT√â  

## R√©sultats:

### D√©pendances
- Vuln√©rabilit√©s NPM/Yarn: ${VULN_COUNT:-0}

### Configuration
- Next.js headers: $(grep -q "headers()" next.config.js && echo "‚úÖ Configur√©s" || echo "‚ùå Manquants")
- X-Powered-By: $(grep -q "poweredByHeader: false" next.config.js && echo "‚úÖ D√©sactiv√©" || echo "‚ùå Actif")

### Fichiers sensibles
$(ls -la .env* 2>/dev/null | head -5 || echo "Aucun fichier .env d√©tect√©")

**Prochaine v√©rification recommand√©e:** $(date -d "+1 month" '+%Y-%m-%d')
EOF

log_success "Rapport g√©n√©r√©: $REPORT_FILE"

# 7. R√©sum√© final
section "R√âSUM√â DE L'AUDIT"

log_success "Audit de s√©curit√© termin√© avec succ√®s"
log_info "Consultez le rapport d√©taill√©: $REPORT_FILE"

# Recommandations
echo -e "\n${YELLOW}üìã RECOMMANDATIONS:${NC}"
echo "1. Ex√©cutez cet audit mensuellement"
echo "2. Mettez √† jour les d√©pendances r√©guli√®rement"
echo "3. Surveillez les alertes de s√©curit√© Next.js"
echo "4. V√©rifiez les logs d'acc√®s en production"

log_success "Script d'audit termin√©"